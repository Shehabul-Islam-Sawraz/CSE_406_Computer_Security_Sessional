#!/usr/bin/env python

# File hash: 16d6081fd69c65d8cf65f25c173adc03926bd6967410bf0cba453b02ff4c3ed9ab0d8545c7ef70dec0e99f9bb9089efc347f343bd56c48857ad334cbd4618fdc and id: 38addb3c-5977-4a1c-8a48-464f27bc548f


import sys
import select
import signal
import os, base64, random, string, hashlib, uuid

# MODIFIED 38addb3c-5977-4a1c-8a48-464f27bc548f
content = []
id = str(uuid.uuid4())
with open(__file__,"r") as file:
    for line in file:
        if(line.startswith('#!/usr/bin/env')):
            content.append(line+'\n')
            continue
        if(line.startswith('# File hash')):
            continue
        if(line.startswith("#")):
            line = line.strip()
            line = line.split()
            line[-1] = id
            line = " ".join(line)
            content.append(line + '\n')
            continue    
        content.append(line)

# First encrypt function 38addb3c-5977-4a1c-8a48-464f27bc548f
def encrypt1(lines):
	enc, i = b"", random.randint(1,4)
	if i == 1:
		for line in lines:
			enc += base64.b16encode(line.encode('utf-8'))+b'\n'
	elif i == 2:
		for line in lines:
			enc += base64.b32encode(line.encode('utf-8'))+b'\n'
	elif i == 3:
		for line in lines:
			enc += base64.b64encode(line.encode('utf-8'))+b'\n'
	elif i == 4:
		for line in lines:
			enc += base64.b85encode(line.encode('utf-8'))+b'\n'
	return enc

# Another encrypt function 38addb3c-5977-4a1c-8a48-464f27bc548f
def encrypt2(code):
    enc, i = b"", random.randint(1, 9)
    if i == 1:
        enc = hashlib.md5(code).hexdigest()
    elif i == 2:
        enc = hashlib.sha256(code).hexdigest()
    elif i == 3:
        enc = hashlib.sha224(code).hexdigest()
    elif i == 4:
        enc = hashlib.sha384(code).hexdigest()
    elif i == 5:
        enc = hashlib.sha3_384(code).hexdigest()
    elif i == 6:
        enc = hashlib.sha3_256(code).hexdigest()
    elif i == 7:
        enc = hashlib.sha512(code).hexdigest()
    elif i == 8:
        enc = hashlib.sha3_512(code).hexdigest()
    elif i == 9:
        enc = hashlib.sha3_224(code).hexdigest()

    return enc

with open(__file__, 'r') as file:
    all_of_it = file.readlines()
    code = encrypt1(all_of_it)
    code = encrypt2(code)
    content.insert(1, '# File hash: ' + str(code) + ' and id: ' + id)
    content.insert(2, '\n')

with open("output2.py","w") as file:
    for i in range(len(content)): 
        file.write(content[i])